*표준화 페이지 기본 형식
<!doctype html>     <----표준성을 위해 doctype, lang, charset, title 등을 삽입
<html lang="ko">
    <head>
        <meta charset="utf-8">     <----문자셋, 글자깨지면 무조건 얘 문제
        <title>document</title>     <----페이지 제목, title은 무조건 meta <charset="utf-8"> 밑에 있어야 한다
    </head>
    <body>
    
    </body>
</html>

*웹페이지 개발 방법
1. 분리해서 코딩
-구조(structure): html
-표현(presentation): css
-동작(behavior): javascript

*html 첫 시작 시, ! + tab or enter 치고 나오는 기본 코드들은 vscode의 기능이 아니라 emmet abb의 기능임.

*HTML
1. "<"와 ">"사이에 명령어 (tag, elements) 작성
2. 시작태그와 중료태그로 구성
3. 태그는 중첩 가능하며 종료태그는 나중에 작성한 태그 먼저 작성
    -<div><p><a></div></p></a> (x)
    -<div><p><a></a></p></div> (o)
4. 종료태그가 없거나 생략 가능한 태그
    -종료태그가 없는 태그 : br, img, hr, meta, input...
        >>>만약 <a><img></img></a>를 접근성(일반인도 접근이 쉽고, 장애인도 접근이 가능한 것) 및 표준성 검사를 하더라도 문제는 없다. 다만, web의 용량이 커질 수 있다.
5. 디버깅을 하지 않음
6. 가급적 모든 태그와 속성은 소문자로 작성

*setting > search 'emmet' > 제일 하단 variable에서 add item > lang 항목에 en을 ko로 변경

                                                                                                                            *태그의 형식
<   명령어              속성                =               "속성값"    >
<   tag                 property           =                 "value"    >
<   element          attribute           =               "value"    >
<   img                     src                  =           "logo.jpg"   >

*entitiy type
-&nbsp; : web에 여백 가능 (non breaking space) > 여기서 break는 줄바꿈, 그러므로 줄 바꾸지말고 공간을 만들라는 의미 / 한번 당 space bar 1회
-&copy; : copyright에서 특수문자 c
-&amp; : & 기호...(ampersand가 &의 원래 이름)

                                                                                                                            *속성의 특징
1. 태그와 속성, 속성과 속성은 공백으로 구분
    ex) <a href="#"> ---> o
            <ahref="#"> ---> x
2. 여러 개의 속성을 사용할 수 있지만
    ex) A : <img src="/" width="길이" height="높이"> --> o
같은 속성을 두 번 이상 사용 불가
    ex) B : <img src="/" width="300" width="400"> --> x
3. 하나의 속성에는 값을 한 개만 지정
    ex) <img src="/" width="300,400">
4. 속성값은 원래의 이름이 한글인 경우를 제외하고 한글 사용 불가
    ex) <img width="300"> --> o
            <img width="삼백"> --> x
                 예외 태그 : meta
                    <meta name="keywords" content="영화, 한국영화, 외국영화"> ---> name과 content가 연관되어 있는 구조이다. name이 물어보면 content가 대답해주는 등의 방식
5. 속성값에는 " " 생략 가능(xhtml에서는 생략 불가)

                                                                                                                            *html 주요 태그
1. meta
    -문서의 제목 정의
    -head 태그 내에 작성
2. title
    -문서의 제목 정의
    -head 태그 내에 작성
3. h(Heading)
    -제목 표시
    -h1(큰 제목)~h6(작은 제목)
    -줄 바꿈 + 볼드체 적용
4. p(paragraph)
    -문반 구분
    -문장 형식일 때 p태그
5. br(break)
    -줄 바꿈
6. 목록 태그
    -ul(unordered list: 비순차목록)
    -ol(ordered list: 순차목록)
    -dl(definition list: 정의 목록)
>>각 리스트를 전부 dl로 묶는 이유는 각각 디자인하기 쉽게 하기 위해서 이다.

    -li(list item: ol, ul의 항목)

    -dt(definition term: 목록에 대한 정의)
    -dd(definition description: 정의 목록의 항목)
7. a(anchor)
    -링크 생성 / 목적지에는 id, a에는 #id name
8. img
    -웹 페이지에 이미지 불러오기
    -src, alt 속성 필요
    -alt 속성은 메인이미지, 로고 등으로 표현하지않고 그 이미지를 통해 얻을 수 있는 정보를 그대로 기입한다.
9. div
    -여러 개의 요소를 그룹화
    -id, name, class, data-role

                                                                                                                                        **레이아웃 기본 구조**
1.header
    -상단 로고, gnb, top menu등
    -주로 페이지 안내(이동)에 관한 요소 포함
    -gnb:global navigation bar - 메뉴바

2.content(main)
    -페이지별 내용, LNB, 배너, 게시판, 퀵메뉴 등
    -해당 페이지에서 나타내고자 하는 내용 작성
    -LNB: Local Navagation Bar - 사이드 메뉴
    메인메뉴(대메뉴)에 포함된 하위메뉴(소메뉴)의 집합

3.footer
    -회사나 사이트에 대한 정보
    -각종 연락처, 관리자 정보, 약관 및 정책, 카피라이트 등

4.기타요소(sns, 검색, 관련 사이트 등)는 필요한 위치에 추가

#semantic elements(장치들이 인식하기에도 헤더인지 푸터인지 등을 가능하게끔 하는 요소)
<div id=header></div> = <header></header>
<div id=footer></div> = <footer></footer>
#오늘은 <time>화요일</time>입니다.

                                                                                                                                        **html5의 section 요소**
1. header
    -페이지의 독자적 요소
    -로고, 내비게이션
    -반드시 하나 이상의 제목(h1~h6)명시
    -section, header, footer 태그 사용 불가
    -요소의 위치 무관

2. article
    -페이지 내용상 별개의 내용을 구성할 때 사용되는 섹션
    -다른 페이지에 있어도 되는 정보

3.section
    -단락, 이미지, 제목 등의 콘텐츠를 묶어 더 큰 논리적 단위 형성
    -body 안에 들어갈 수 있는 모든 요소 사용(header, footer 포함)
    -class나 id속성을 사용하여 섹션에 대한 특정정보(메타데이터) 추가
    -그 페이지에만 있어야 하는 정보

4.main
    -문서의 주요 내용 정의(요소 내부의 내용은 문서에 고유)
    -문서 내에 한 번만 사용
    -article, aside, header, nav, footer 요소의 하위에 사용 불가
    -사이드 콘텐츠, 저작권 정보, 사이트 로고, 검색 양식 등 모든 내용 포함 가능

5. nav
-페이지 링크, 내부 링크가 있는 섹션 마크업 시 사용
-메인 네비게이션이 있는 섹션에만 사용
-주요 네비게이션(주요 메뉴)

6.aside
-본문 내용에 대한 추가적인 설명, 부수적 콘텐츠 표시에 사용하는 태그
-없어져도 된다

7.footer
-저작권, 개인정보 보호정책, 연락처 등의 콘텐트
-문서상의 위치 무관

8.figure
-이미지에 대한 캡션이나 설명을 위한 태그
-문서의 흐름에 영향을 주지 않는 콘텐트 마크업에도 사용




                                 **경로(URL, Uniform Resource Location) -> uri or path를 사용함

1. 파일의 위치
    <img src="???" alt="???">
    <a href="클릭했을 때 이동할 페이지의 위치">
    <link rel="sylesheet" type="text/css" href="불러올 css파일의 위치">
    <script type="????" src="불어올 js파일의 위치"></script>
    background-image:url(????) -> 배경에 쓸 이미지의 url
    @import "불러올 css파일의 위치"; = link -> css파일 불러오기
    location.href="이동할 페이지의 주소" -> a태그를 js파일로 구현
    location.replace("이동할 페이지의 주소"); -> a태그를 js파일로 구현
    include "불러올 다른 파일의 위치";

2. 파일 경로 설정 방법
    *절대 경로 -> 
        1) 최상위 디렉토리부터 순차적으로 이동하는 경로
        2) 드라이브명(c:,d:)이나 프로토콜(http://,ftp://)로 시작
        3) 기준 파일의 위치에 상관없이 대상 파일의 경로가 동일
        4) 다른 사이트의 자원을 이용하는 경우
    *상대 경로
        1) 기준 파일과 대상 파일의 위치에 따라 경로 설정
        2) 동일한 디렉토리(폴더)에 있는 경우
            -파일명.확장자
        3) 하위 디렉토리에 있는 경우
            -디렉토리명 / 파일명.확장자
        4) 상위 디렉토리에 있는 경우
            -../ : 위로 * 1
            -../파일명.확장자
        5) 복합 사용
            #CLI > mkdir = make directory, GUI > folder
            #GUI 환경에서 
                click - select
                dbl click - select + open = /
            #c drive에 있는 모든 폴더나 파일들의 root는 c:
            #d drive에 있는 모든 폴더나 파일들의 root는 d:

                                                            *테이블(table)
1. 정보 전달에 활용

*특징
1. 각 행의 셀 개수는 동일
2. 같은 행에 있는 셀들은 높이가 동일
3. 같은 열에 있는 셀들은 길이가 동일
>>>행 row / 열 column / 셀 cell

*관련 태그
1. table : 테이블의 외곽선 표시
2. tr(table row) : 표의 행(줄) 구분
3. td(table data cell) : 셀(칸) 생성
4. th(table header) : 제목 셀 지정

*테이블 관련 요소 속성
1. colspan : 열 병합
2. rowspan : 행 병합
    -항상 합쳐지기 시작하는 점에 사용한다
    -합쳐진 셀은 지운다

*접근성 향상을 위한 요소
1. caption : 표의 제목
2, summary(속성) : 표의 제목
3. thead / tfoot / tbody : 각 셀들의 역할별 구분
    -thead : 제목, tfoot : 결과. tbody : 내용
    >>>table을 만들 때, tfoot부터 기입하여 리더기에서 결과를 빨리 얻을 수 있게 한다
4. id(속성) : 제목 셀에 이름 부여
5. headers(속성) : 해당 셀의 제목셀 지정
    >>>제목에 id 부여하고 내용에 headers 이용해서 띄어쓰기로 구분지으며 순서대로 id 기입하면 그 순서대로 읽는다
    
                                                ** 입력 양식(web form) **
사용자가 페이지에 값을 전달하는 모든 형식
** form **
1. 모든 양식은 <form> ~ </form> 안에서 작성
2. 모든 양식은 이름(name AND id) 입력
3. 대부분의 양식은 <input> 태그의 "type" 속성으로 정의
    <input type="종류 선언">

*type 속성
1.text
2.password
3.checkbox
4.radio
5.image
6.file
7.hidden
8.button
9.submit
10.reset
11.readonly : 쓰지만 못하고 전송은 된다
12.disabled : 쓰지도 못하고 전송도 안된다

#CRUD(CREAT, READ, UPDATE, DELETE)
:insert, update, delete, select
input -> process <-> db
input에서 process로 어떻게 보낼지 정하는게 method

#동기식:순차적인 과정을 거쳐 보여줌, 비동기식:process, db, result가 계속 루프하여 input(Result)에 보여줌. 화면이 깜빡거리지않음. 이동이 없음.
------------------------------------------------------- 9/14
<remind>
-대부분의 input 요소의 name과 id 속성을 동일하게 사용하면 된다. 그러나 type="radio"는 예외
-type="checkbox"는 value값이 db로 전송된다 
///

4. <select> : 콤보 상자 작성
    <select>
    <option>~</option>
    <option>~</option>
    </select>

5. <textarea> : 텍스트를 여러 줄 입력하는 상자 작성

6. <button> : 버튼 형식의 요소 작성(input 대신 button 사용)
    -<button type="">TEXT</button>

7. filedset : 양식의 소그룹(form태그 전체 안에서 그룹을 만드는 태그)
8. legend : fieldset의 제목
9. label : 필드와 텍스트의 그룹
10. for(속성) : 연결하고자 하는 필드의 id값 작성

------------------------------------------------------9/15
https://html.spec.whatwg.org/multipage/   ---> 참고
http://www.tcpschool.com/html-tags/intro
