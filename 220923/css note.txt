*CSS (Cascading Style Sheet)
웹 페이지의 표현(디자인)을 나타내는 언어

<   A   B   =   "C"     B   =   "C"     ...     >

selector(선택자 : 누구한테) {
    property(속성 : 어떤 효과)  :   value(값 : 얼만큼) ;    
    B   :   C   ;
}

object  .   property    =   value

*선택자
1. 태그 선택자(태그 정의 스타일)
-html 태그에 직접 효과 적용
-해당 태그 작성 시 자동으로 효과 적용

2. 클래스 선택자
-중복 가능
.name{효과}
<요소 class="name">


3. 아이디 선택자
-중복 불가
#name{효과}
<요소 id="name">

4. 다중 선택자
A,B,C      {효과}

5. 후손 요소 선택자(자식도 되고, 후손도 되고)
A   B      {효과}

6. 자식 요소 선택자
A   >   B    {효과}

>>>조상 ancestor>부모 parent>형제(나) sibling>자식 childeren>후손 descendant
>>>2,3 사용자 정의 스타일
>>>실무에서는 class를 많이 사용


**스타일 적용 방법

    *내부 방식
        1. 내부 스타일
            <head>
            <style type="text"> <--- 스타일 선언문
            selector{property : value}
            </style>
        2. 인라인 방식
            <elem style="property.value; property:value"></elem>
    *외부 방식
    selector {property : value} <-- name.css로 저장, 선언문 생략
        1.링크 방식
            <head>
            <link ref="stylesheet" type="text/css" href="name.css">
            </head>
        2. 임포트 방식
            <head>
            <style type="text">
            @import "name.css";
            </style>
            </head>

#favicon.ico
 >> tab상 아이콘(만약 아이콘이 투명색을 포함해야하는 경우, 포토샵에서 .png로 저장하면 된다 > png를 ico로 변환시켜주는 사이트 아무 곳이나 들어가서 변환하면 된다)

**요소 레벨(element level)**
태그가 어떻게 보여지는가에 대한 구분

1.블록 레벨(block level)
-독립된 행을 갖는 요소 집합
-크기 지정, 위치 조정 가능(*)
-p, h1~h6, ul, ol, li, div, table...
-다른 블록 레벨 요소와 인라인 요소 포함 가능
-p, h, dt, address 같은 일부 요소는 다른 블록 포함 불가

>>>width를 어떻게 설정하던 그 행에는 이 요소만 존재
>>>default width, height = auto
>>>overflow : 넘치는 부분을 처리하는 방법을 지정(auto, hidden, scroll, visible(기본값))

!!제목은 인풋타입텍스트, 내용적기는 텍스트에어리어(우리가 페이지에 값을 써야할 때), 약관페이지는 div,오버플로우
!!position:absolute, display 등은 요소 레벨을 강제로 바꿀 수 있음

2.인라인 레벨(inline level)
-범위 표시 요소의 집합
-크기(예외:img), 위치 조정 불가
-a, em, strong, img, span...
-블록 레벨 요소는 포함할 수 없고 인라인 요소만 포함 가능
-html5 이후 a요소는 블럭 포함 가능
-높이 속성 사용 불가

>>>w3c markup 검증 서비스로 검증가능

*여백 속성
1. margin
2. padding

*margin
1. 바깥쪽 여백(위치)
2. margin-top / margine-right / margin - bottom / margin-left
3. margin : top right bottom left
    margin : top right bottom (same right)
    margin : top/bottom right/left
    margin : all
4. margin : auto
    상하 여백 0, 좌우 여백 동일
    (블럭 요소 가운데 정렬)
    = margin : 0 auto

*text-align : center
    인라인 요소 가운데 정렬

*padding
1. 안쪽, 여백(크기)
2. margin 사용법과 동일

*box width : 800px
-width:800px + padding:100px + border:100px = 800px +(100+100)px + (100+100)px = 1200 px

*box width : 100%
-width : 100% + padding: 100px + border:100px = 100%+400px

*box width : auto
-width + padding + border = 100%

*box-sizing : border-box
-width + padding + border = widthk
-width:80%; padding: 100px; border:100px = 80%+400px
-width:80%; padding:100px; border:100px; box-sizing:border-box = 80%

*float
1. 수직 구조의 요소를 수평 구조로 변경
2. 요소의 레벨이 inline-block으로 변경
3. 수평으로 나열될 모든 요소에 float 속성 적용
4. none / left / right
5. 선택된 요소를 위로 띄우는 속성
6. 위로 이동하면서 생긴 빈 자리에 다른 요소가 이동
7. 자식 요소의 길이 합이 부모 요소의 길이보다 길면
부모 요소의 길이를 초과하는 요소들이 아래쪽으로 이동(태그 작성순)
8. 형제와 부모 관계의 요소들끼리만 적용(자식 요소가 float되면 부모 요소가 자식 요소의 height를 읽지 못함)
9. 부모 요소는 float가 적용된 자식 요소의 높이 인식 못함
    9-1)자식 요소에게 float가 적용되어있고, 부모 요소에게 height가 없는 경우에 overflow:hidden; 사용하면 float의 height를 읽는다.(overflow:hidden의 기능이 바뀜 / 높이가 변하는 창을 구현할 때 like 게시판 내용보기)

*clear
1. float 속성 해제
2. left / right / both
>>>부모 요소의 크기가 충분히 커도 float 옆으로 가지 말라고 사용
>>>

*css 속성 우선순위 공식
p : A / F > float > m : A (+width, p : R)
P : position
A : absolute
F: fixed
M: margin
A : auto
P : position
R : relative

**position
1.움직이는 방법
2. 위치 속성과 함께 사용

*위치 속성
1. top / right / bottom / left
2. position 속성이 없는 경우 이동 불가
3. right, bottom은 relative인 경우 사용 불가

**position 속성값
1. static: 기본값, 이동 불가
2. absolute: 절대 위치 지정, 형제 요소간 동일한 중심점 사용
3. relative : 모든 요소가 독립된 중심점 사용
4. fixed: 스크린을 기준으로 지정된 위치에 고정

오늘 공식
-자식이 플로트면 부모에 헤이트 꼭 적어라
-자식이 포지션 앱솔루트면 부모에 포지션 랠러티브 꼭 써라
-----------------------------------------------------------------------9/16
*이미지 슬라이스 : 하나의 커다란 이미지를 작은 여러개로 만드는 법
    ㄴ 이미지를 자를 때 최대한 딱 맞게 잘라야 하지만 기본적으로 좀 여유있게 잘라서 사용자들이 클릭하기 편하게 한다
    ㄴ 포토샵에서는 1px이 크게 차이 없지만 웹에서는 1px이 거의 대부분 다 티가 난다
    ㄴ 그러므로 가이드선 쓸 때 shift 누른 상태에서 놓도록 하자
    ㄴ slice할 때 snap 켜놓으면 쉽게 할 수 있다(guide와 slice는 어지간하면 활성화시키도록 하자)
    ㄴ file - export - save for web 으로 저장하면 슬라이스한 부분만 저장하는 것
    ㄴ save for web을 하게 되면 저장을 총 두번 해야하는데 1. select, 2. option
    ㄴ gif: general interface format(특징 : web 전용 확장자, 인쇄할 수 없음, 최대 색상 수가 256개 밖에 없음, 8비트 컬러를 사용, 216개의 웹 안전 컬러가 있음, 포토샵 애니메이션은 gif로 해야 함, dither사용) / jpg (특징 : 24비트 컬러를 사용, 이미지의 선명도가 중요한 경우라면 그 파일의 확장자는 jpg를 해야함,퀄리티를 80으로 했었다 왜냐하면 100과 시각적 차이는 없으나 용량은 2/3 정도로 줄어듦) / png(특징 : 이미지의 투명한 부분을 포함한다, png-24를 사용한다 왜냐하면 png-8은 gif와 같다, 번지는 효과가 있으면 gif는 그라데이션 효과가 생긴다, 그러나 png-24는 자연스럽게 표현된다)
    ㄴ보통 페이지를 코딩할 때 root directory-images, css, js / slice한 이미지르 save for web을 할 때에는 images가 보이거나 보여야할 자리에 넣는다, 왜냐하면 images를 열고 저장하면 그 폴더 안에 images 폴더가 또 생긴다. slice - save for web하면 images 폴더가 새로 생기거나 기존에 있다면 읽어서 그 폴더 안에 저장하기 때문이다.

*caniuse
    ㄴ호환성 검사 페이지

*버튼을 이미지 따는 경우, 기호만 따고 텍스트는 html로 그대로 표현하거나 전부 다 따고 html 상에는 내가 식별하기 편하게 한 후에 css로 이미지 처리하여 표현할 수 있음

*웹 내 미디어는 웹페이지 내에서 바로 재생하거나(이 경우에는 동영상 태그), 팝업을 추가하여 재생하거나(이 경우에는 이미지 태그)

*텍스트를 크기 그대로 자르게 되면 코딩 시에 여백을 줘야 함. 그래서 글자만 자를지 여백도 같이 포함하여 자를지 선택해서 그거에 맞춰 코딩하면 됨.

*gnb를 slice할 때는 상하좌우 같은 여백을 줘야한다

*웹 페이지 개발 방법
1. 분리해서 코딩
    -구조(structure) : html
        ㄴ내용만 만든다, 내용과 구조는 조금 다른 의미지만 html로는 내용만 만든다
    -표현(presentation) : css
    
    -동작(behavior) : javascript

*내용 작성
1. 이해하기 쉽게
2. 논리적으로
3, 의미있게
4, 구조적으로
5. 콘텐트는 "제목 + 내용"으로 작성
6. 디자인에는 없는 요소들도 내용 전달에 필요하면 추가 작성(중요)
7. 중요도, 선호도, 사용빈도가 높은 순으로

*코딩 순서
1. 내용 작성
2. 마크업 : 용도나 목적에 맞는 태그 작성
3. 콘텐트 블럭
    ㄴ같은 내용은 같은 상자에 담아두되, 예전에는 div로 다 묶었지만 이제는 의미를 갖고있는 태그들을 사용한다.
    ㄴdiv는 css를 위해 사용한다고 정의되어있음.
    ㄴ앞장서서 바꾸자!
4. css 초기화
5. css 작성
6. 스크립트 적용
7. 프로그래밍 적용
8. 표준/접근성 검사
9. 수정/보완

--------------------------------------------------------------------------------9/19
p태그도 div태그처럼 한번 더 묶어줄 수 있다.

*a태그를 포함한 요소를 텍스트에서 이미지로 변경시킬 때에는 a태그에 css를 넣는게 좋다




---------------------------------------------------------------------------9/20
#과제
내 main page css코딩하기

---------------------------------------------------------------------------9/21
**flex(flexible box, flexbox) 속성
-컨테이너에 적용하는 속성
-아이템에 적용하는 속성

*display:flex;

.container{display:flex;}
                or display:inline-flex;

-아이템들이 가로 방향으로 배치
-내용물만큼 width 적용(=inline)
-아이템들의 height가 모두 컨테이너의 높이만큼으로 자동 적용
    (float는 각각의 콘텐트만큼 높이 설정)

*flex container
1. flex container(플렉스 컨테이너)
2.flex의 영향을 받는 전체공간

*flex item(플렉스 아이템)
1. 설정된 속성에 따라 각각의 아이템들이 어떤 형태로 배치되는 것

<div class="container">
<div class="item">helloflex</div>
<div class="item">abc</div>
<div class="item">helloflex</div>
</div>

**플렉스 특징
1. 호환성 문제
2. 관련된 속성들이 너무 많다

**flex 컨테이너 속성

*flex-direction : 배치 방향 설정
    1.row: 왼쪽부터 순차적 배치
    2.row-reverse: 오른쪽부터 순차적 배치
    3.column: 위에서 아래로 순차적 배치
    4.column-reverse: 아래에서 위로 순차적 배치

*flex-wrap : 줄넘김 처리 설정
-아이템 줄바꿈 속성

1.nowrap : 줄바꿈을 하지 않음
2. wrap : 줄바꿈
3. wrap-reverse : 역순으로 배치 후 줄바꿈

*flex-flow

.container{flex-flow:row wrap;}
/*flex-direction: row;}*/
/*flex-wrap: wrap;*/

1.flex-direction과 flex-wrap을 한번에 지정
2. flex-direction, flex-wrap의 순으로 공백으로 구분

*아이템 정렬
1. justify: 수평축 정렬
2. align: 수직축 정렬

*justify-content: 메인축 방향 설정
-수평축 방향으로 아이템 정렬

.container {
    justify-content: flex-start;
    /* justify-content: flex-end;
    justify-content: center;
    justify-content: space-between;
    justify-content: start;
    justify-content: space-evenly; */
}

1.flex-start(기본값) : 아이템들을 시작점으로 정렬
    - flex-direction : row(왼쪽), column(위)
2.flex-end : 아이템들을 끝점으로 정렬
    - flex-direction : row(왼쪽), column(위)
3.center : 아이템들을 가운데로 정렬
4.space-between : 아이템들 사이에 균일한 간격 생성
5.space-around : 각 아이템의 좌우에 균일한 간격 생성
6.space-evenly : 아이템들의 사이와 양 끝에 균일한 간격 생성
7.IE와 엣지(Edge) 지원 불가

*align-items : 수직축 방향 정렬
-수직축 방향으로 아이템 정렬

.container{
    align-items:stretch;
    /*align-items:flex-start;*/
    /*align-items:flex-end;*/
    /*align-items:center;*/
    /*align-items:baseline;*/
}
1.stretch(기본값) : 아이템들을 위아래 방향으로 끝까지 늘림

2.flex-start : 아이템들을 위쪽으로 정렬
-flex-direction : column인 경우

3.flex-end : 아이템들을 아래쪽으로 정렬
-flex-direction : column인 경우

4. center : 아이템들을 중간 정렬

5. baseline : 아이템들을 텍스트 베이스라인 기준으로 정렬

**아이템 중간 정렬
justify-content:center;
align-item:center;

*align-content : 여러 행 정렬
-flex-wrap: wrap이 설정된 상태에서 아에팀들의 행이 2줄 이상인 경우 수직축 방향 정렬 지정

.container{
    flex-wrap:wrap;
    align-content:stretch;
    /* align-content:flex-start;*/
    /* align-content:flex-end;*/
    /* align-content:center;*/
    /* align-content:space-between;*/
    /* align-content:space-around;*/
    /* align-content:space-evenly;*/
}

1. stretch
2. flex-start
3. flex-end
4. center
5. space-between
6. space-around
7. space-evenly : MS 계열 브라우저(IE,엣지)에서 지원하지 않음

*align_self
-align-items로 교차축(cross axis) 아이템 정렬
-align-items 속섣보다 우선 적용
-콘테이너 안의 모든 아이템에 적용
-특정 아이템의 정렬을 따로 정할 경우 align-self 속성 사용
-기본값은 auto로 align-items 속성의 값을 상속

.container{
    flex-wrap:wrap;
    align-self:flex-start;
    /*align-self:flex-end;*/
    /*align-self:center;*/
    /*align-self:baseline;*/
    /*align-self:stretch;*/
}

1.auto
-부모 컨테이너의 align-items 속성을 상속 받음.
-부모 컨테이너가 없는 경우 stretch 적용.

2.stretch : 컨테이너에 맞게 변경

3.center : 컨테이너 중심에 위치

4.flex-start : 컨테이너 앞단 부분에 위치

5.flex-end : 컨테이너 끝단 부분에 위치

6.baseline : 컨테이너의 기본선에 위치

7.initial : 이 속성의 기본값으로 설정

8.inherit : 부모 요소의 속성값 상속
----------------------------------------------------------------------------9/23

*과제

1. 입력 양식 포함된 페이지 레이아웃
-"join_본인이름.html","login_본인이름.html" 등으로 이름 작성

2."220926_본인이름" 폴더에 모든 파일 포함하여 제출

https://studiomeal.com/archives/533