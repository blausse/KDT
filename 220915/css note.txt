*CSS (Cascading Style Sheet)
웹 페이지의 표현(디자인)을 나타내는 언어

<   A   B   =   "C"     B   =   "C"     ...     >

selector(선택자 : 누구한테) {
    property(속성 : 어떤 효과)  :   value(값 : 얼만큼) ;    
    B   :   C   ;
}

object  .   property    =   value

*선택자
1. 태그 선택자(태그 정의 스타일)
-html 태그에 직접 효과 적용
-해당 태그 작성 시 자동으로 효과 적용

2. 클래스 선택자
-중복 가능
.name{효과}
<요소 class="name">


3. 아이디 선택자
-중복 불가
#name{효과}
<요소 id="name">

4. 다중 선택자
A,B,C      {효과}

5. 후손 요소 선택자(자식도 되고, 후손도 되고)
A   B      {효과}

6. 자식 요소 선택자
A   >   B    {효과}

>>>조상 ancestor>부모 parent>형제(나) sibling>자식 childeren>후손 descendant
>>>2,3 사용자 정의 스타일
>>>실무에서는 class를 많이 사용


**스타일 적용 방법

    *내부 방식
        1. 내부 스타일
            <head>
            <style type="text"> <--- 스타일 선언문
            selector{property : value}
            </style>
        2. 인라인 방식
            <elem style="property.value; property:value"></elem>
    *외부 방식
    selector {property : value} <-- name.css로 저장, 선언문 생략
        1.링크 방식
            <head>
            <link ref="stylesheet" type="text/css" href="name.css">
            </head>
        2. 임포트 방식
            <head>
            <style type="text">
            @import "name.css";
            </style>
            </head>

#favicon.ico
 >> tab상 아이콘(만약 아이콘이 투명색을 포함해야하는 경우, 포토샵에서 .png로 저장하면 된다 > png를 ico로 변환시켜주는 사이트 아무 곳이나 들어가서 변환하면 된다)

**요소 레벨(element level)**
태그가 어떻게 보여지는가에 대한 구분

1.블록 레벨(block level)
-독립된 행을 갖는 요소 집합
-크기 지정, 위치 조정 가능(*)
-p, h1~h6, ul, ol, li, div, table...
-다른 블록 레벨 요소와 인라인 요소 포함 가능
-p, h, dt, address 같은 일부 요소는 다른 블록 포함 불가

>>>width를 어떻게 설정하던 그 행에는 이 요소만 존재
>>>default width, height = auto
>>>overflow : 넘치는 부분을 처리하는 방법을 지정(auto, hidden, scroll, visible(기본값))

!!제목은 인풋타입텍스트, 내용적기는 텍스트에어리어(우리가 페이지에 값을 써야할 때), 약관페이지는 div,오버플로우
!!position:absolute, display 등은 요소 레벨을 강제로 바꿀 수 있음

2.인라인 레벨(inline level)
-범위 표시 요소의 집합
-크기(예외:img), 위치 조정 불가
-a, em, strong, img, span...
-블록 레벨 요소는 포함할 수 없고 인라인 요소만 포함 가능
-html5 이후 a요소는 블럭 포함 가능
-높이 속성 사용 불가

>>>w3c markup 검증 서비스로 검증가능

*여백 속성
1. margin
2. padding

*margin
1. 바깥쪽 여백(위치)
2. margin-top / margine-right / margin - bottom / margin-left
3. margin : top right bottom left
    margin : top right bottom (same right)
    margin : top/bottom right/left
    margin : all
4. margin : auto
    상하 여백 0, 좌우 여백 동일
    (블럭 요소 가운데 정렬)
    = margin : 0 auto

*text-align : center
    인라인 요소 가운데 정렬

*padding
1. 안쪽, 여백(크기)
2. margin 사용법과 동일

*box width : 800px
-width:800px + padding:100px + border:100px = 800px +(100+100)px + (100+100)px = 1200 px

*box width : 100%
-width : 100% + padding: 100px + border:100px = 100%+400px

*box width : auto
-width + padding + border = 100%

*box-sizing : border-box
-width + padding + border = widthk
-width:80%; padding: 100px; border:100px = 80%+400px
-width:80%; padding:100px; border:100px; box-sizing:border-box = 80%

*float
1. 수직 구조의 요소를 수평 구조로 변경
2. 요소의 레벨이 inline-block으로 변경
3. 수평으로 나열될 모든 요소에 float 속성 적용
4. none / left / right
5. 선택된 요소를 위로 띄우는 속성
6. 위로 이동하면서 생긴 빈 자리에 다른 요소가 이동
7. 자식 요소의 길이 합이 부모 요소의 길이보다 길면
부모 요소의 길이를 초과하는 요소들이 아래쪽으로 이동(태그 작성순)
8. 형제와 부모 관계의 요소들끼리만 적용(자식 요소가 float되면 부모 요소가 자식 요소의 height를 읽지 못함)
9. 부모 요소는 float가 적용된 자식 요소의 높이 인식 못함
    9-1)자식 요소에게 float가 적용되어있고, 부모 요소에게 height가 없는 경우에 overflow:hidden; 사용하면 float의 height를 읽는다.(overflow:hidden의 기능이 바뀜 / 높이가 변하는 창을 구현할 때 like 게시판 내용보기)

*clear
1. float 속성 해제
2. left / right / both
>>>부모 요소의 크기가 충분히 커도 float 옆으로 가지 말라고 사용
>>>

*css 속성 우선순위 공식
p : A / F > float > m : A (+width, p : R)
P : position
A : absolute
F: fixed
M: margin
A : auto
P : position
R : relative

**position
1.움직이는 방법
2. 위치 속성과 함께 사용

*위치 속성
1. top / right / bottom / left
2. position 속성이 없는 경우 이동 불가
3. right, bottom은 relative인 경우 사용 불가

**position 속성값
1. static: 기본값, 이동 불가
2. absolute: 절대 위치 지정, 형제 요소간 동일한 중심점 사용
3. relative : 모든 요소가 독립된 중심점 사용
4. fixed: 스크린을 기준으로 지정된 위치에 고정

오늘 공식
-자식이 플로트면 부모에 헤이트 꼭 적어라
-자식이 포지션 앱솔루트면 부모에 포지션 랠러티브 꼭 써라
------------------------------------------------------------9/16




---------------------------------------------------------------------------------9/19

https://studiomeal.com/archives/533